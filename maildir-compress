#!/usr/bin/env perl

=head1 LICENSE

Copyright (C) 2011, Media Temple

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

use strict;
use warnings;

use Carp;
use Config;
use English qw( -no_match_vars );
use Fcntl qw(:mode SEEK_SET);
use File::Spec::Functions;
use File::Temp qw( tempdir );
use Getopt::Long;
use IO::Compress::Bzip2 qw(bzip2 $Bzip2Error);
use IO::Compress::Gzip qw(gzip $GzipError);
use IO::Uncompress::Bunzip2 qw(bunzip2 $Bunzip2Error);
use IO::Uncompress::Gunzip qw(gunzip $GunzipError);
use IPC::Open3 qw(open3);
use Log::Log4perl;
use Readonly;

# More or less #include <signal.h>
defined( $Config{sig_name} ) || croak 'No signals defined?';

my @signame = split q{ }, $Config{sig_name};
my %signo;
@signo{@signame} = ( 0 .. $#signame );

# Initialize Logger
my $log_conf = q(
    log4perl.rootLogger                = DEBUG, SCREEN, SYSLOG

    log4perl.appender.SCREEN           = Log::Log4perl::Appender::Screen
    log4perl.appender.SCREEN.min_level = WARN
    log4perl.appender.SCREEN.stderr    = 0
    log4perl.appender.SCREEN.layout    = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.SCREEN.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss.SSSZ} %p %F:%L: %m %n

    log4perl.appender.SYSLOG           = Log::Dispatch::Syslog
    log4perl.appender.SYSLOG.min_level = WARN
    log4perl.appender.SYSLOG.ident     = maildir-compress
    log4perl.appender.SYSLOG.facility  = daemon
    log4perl.appender.SYSLOG.layout    = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.SYSLOG.layout.ConversionPattern = %p %F:%L: %m
);

Log::Log4perl::init( \$log_conf );
my $logger = Log::Log4perl->get_logger();

Readonly my $BZIP2        => 'bzip2';
Readonly my $GZIP         => 'gzip';
Readonly my $UNCOMPRESSED => 'uncompressed';

my @allowed_compress_types = ( $BZIP2, $GZIP, $UNCOMPRESSED );

my $block_size    = 0;        # To override the block size returned by stat(2).
my $compress_type = $GZIP;    # Easy on the CPUs with reasonable compression.

my $result = GetOptions(
    'block-size=i'    => \$block_size,
    'compress-type=s' => \$compress_type,
);

if ( !grep { $_ eq $compress_type } @allowed_compress_types ) {
    $logger->error(
        "$compress_type is not one of the supported compression types: @allowed_compress_types");
    exit 1;
}

my $exit_status = 0;

foreach (@ARGV) {
    if ( maildir_compress( File::Spec->rel2abs($_) ) ) {
        $exit_status = 1;
    }
}

exit $exit_status;

# Compress the contents of a Maildir.

sub maildir_compress {
    my $maildir = shift;

    if ( !maildir_check($maildir) ) {
        $logger->warn("$maildir does not seem to be a valid maildir, skipping");
        return;
    }

    # If this is the top level maildir, each .Something directory
    # might also be a maildir.

    my ( $volume, $directories, $file ) = File::Spec->splitpath($maildir);
    if ( $file eq 'Maildir' ) {

        my $mdh;
        if ( !opendir $mdh, $maildir ) {
            $logger->error("opendir failed for $maildir");
            return;
        }
        while ( my $df = readdir $mdh ) {
            if ( ( $df eq q{.} ) or ( $df eq q{..} ) ) {
                next;
            }

            if ( ( $df eq 'new' ) or ( $df eq 'cur' ) or ( $df eq 'tmp' ) ) {
                next;
            }

            if ( !( $df =~ / \A \. /msx ) ) {
                $logger->debug("$df doesn't start with a dot, so it can't be a subfolder");
                next;
            }

            my $subdir = catfile( $maildir, $df );

            # Skip non-directories.
            if ( !-d $subdir ) {
                $logger->debug("skipping non-directory $subdir");
                next;
            }

            $logger->info("maildir_compress of subfolder $subdir");
            maildir_compress($subdir);
        }
        closedir $mdh;
    }

    # For each (email) file in new, cur

    foreach my $subdir ( 'new', 'cur' ) {

        my $sub = catfile( $maildir, $subdir );
        my $dh;
        if ( !opendir $dh, $sub ) {
            $logger->error("opendir failed for $subdir");
            next;
        }
        while ( my $mf = readdir $dh ) {
            if ( ( $mf eq q{.} ) or ( $mf eq q{..} ) ) {
                next;
            }

            email_compress( catfile( $sub, $mf ), $maildir );
        }
        closedir $dh;
    }

    return 1;
}

# Compress an email file.

sub email_compress {
    my $mailfile = shift;
    my $maildir  = shift;

    my ( $volume, $directories, $file ) = File::Spec->splitpath($mailfile);

    my ( $time, $id, $host_plus, $vers, $flags )
        = $file =~ / ([^\.]*) . ([^\.]*) . ([^:]*) (:2,)? (.*) /msx;
    if ( !$vers ) {
        $vers = q{};
    }

    if ( !$time or !$id or !$host_plus ) {
        $logger->warn("unable to parse $file as a maildir file name, skipping");
        return;
    }

    my ($dev, $ino,   $mode,  $nlink, $uid,     $gid, $rdev,
        $sz,  $atime, $mtime, $ctime, $blksize, $blocks
    ) = stat $mailfile;

    if ( !$dev ) {
        $logger->error("Unable to stat $mailfile: $OS_ERROR");
        return;
    }

    if ( !( $mode & S_IFREG ) ) {
        $logger->debug("skipping non-file $mailfile");
        return;
    }

    # Open the file in "binary" mode
    my $fh;
    if ( !open $fh, '<', $mailfile ) {
        $logger->error("Can't open $mailfile: $OS_ERROR");
        return 1;
    }
    binmode $fh;

    # Read the "magic" numbers to see what compression (if any) format it's in.
    my $magic;
    if ( !sysread $fh, $magic, 2 ) {
        $logger->error("Can't read magic number from $mailfile: $OS_ERROR");
        return 1;
    }

    # Seek back to the start of the file so read_existing can use the same file handle.
    if ( !sysseek $fh, 0, SEEK_SET ) {
        $logger->error("Can't seek to start of $mailfile: $OS_ERROR");
        return 1;
    }

    my $current_compress_type = $UNCOMPRESSED;

    if ( $magic eq 'BZ' ) {
        $current_compress_type = $BZIP2;    # File is Bzip2 compressed.
    }
    if ( $magic eq "\x1f\x8b" ) {
        $current_compress_type = $GZIP;     # File is gzip compressed.
    }

    # If the file is already of the correct type, skip it
    if ( $current_compress_type eq $compress_type ) {
        $logger->info("$mailfile is already $compress_type");
        return;
    }

    my $size;
    if ( $host_plus =~ / ,S=(\d+) /msx ) {    # Get the size from the file name.
        $size = $1;

        # Probably already compressed in some unknown way?
        if ( ($size > $sz) and ($current_compress_type eq $UNCOMPRESSED) ) {
            $logger->warn("actual size of $sz is less than S=n size of $size, not compressing");
            return;
        }
    }
    elsif ( $compress_type ne $UNCOMPRESSED ) {
        $size = $sz;

        # Size not in file name, so if we're compressing we need to
        # rename the file to include the size.
        $file = "$time.$id.$host_plus" . ',S=' . $size . "$vers$flags";
        my $newmailfile = catfile( $volume, $directories, $file );

        if ( !rename $mailfile, $newmailfile ) {
            $logger->error("unable to rename $mailfile to $newmailfile: $OS_ERROR");
            return;
        }
        $logger->info("renamed '$mailfile' to '$newmailfile'");
        $mailfile = $newmailfile;
    }

    # Check that compressing this file is worth it at all.
    if ( $compress_type ne $UNCOMPRESSED ) {
        if ( $block_size == 0 ) {
            $block_size = $blksize;
        }
        if ( $size <= $block_size ) {
            $logger->info(
                "$mailfile size of $size is less than the file system block size $block_size, not compressing"
            );
            return;
        }
    }

    my $tempdir = tempdir(
        CLEANUP => 1,
        DIR     => catfile( $volume, $directories )
    );

    if ( !$tempdir ) {
        $logger->error("unable to create temporary directory: $OS_ERROR");
        return;
    }

    my $output_file_name = catfile( $tempdir, $file );

    # At this point, slurp in the existing file data

    my $file_data;
    eval { read_existing( $current_compress_type, $mailfile, \$file_data, $fh, $sz ); };
    if ($EVAL_ERROR) {
        $logger->error("unable to read $mailfile: $EVAL_ERROR");
        return;
    }
    eval { write_newfile( $compress_type, $output_file_name, \$file_data ) };
    if ($EVAL_ERROR) {
        $logger->error("unable to write $output_file_name: $EVAL_ERROR");
        return;
    }

    # set owner, mode and times on $output_file_name
    if ( !chown $uid, $gid, $output_file_name ) {
        $logger->error("Unable to chown $mailfile: $OS_ERROR");
        return;
    }
    if ( !chmod $mode, $output_file_name ) {
        $logger->error("Unable to chmod $mailfile: $OS_ERROR");
        return;
    }
    if ( !utime $atime, $mtime, $output_file_name ) {
        $logger->error("Unable to utime $mailfile: $OS_ERROR");
        return;
    }

    # Lock the maildir
    my $pid = maildir_lock($maildir);
    if ( !$pid ) {
        $logger->warn("$maildir can't be locked, skipping $mailfile");
        return;
    }
    $logger->debug("successfully locked $maildir, pid $pid");

    # After this point, we must kill the process holding the lock before we return.

    if ( !-f $mailfile ) {
        $logger->warn("original mailfile $mailfile is now gone, skipping");
    }
    else {
        if ( !rename $output_file_name, $mailfile ) {
            $logger->error("unable to rename $output_file_name to $mailfile: $OS_ERROR");
        }
        else {
            $logger->info("$mailfile is now $compress_type");
        }
    }

    $logger->debug("killing $pid");
    kill $signo{TERM}, $pid;

    if ( !rmdir $tempdir ) {
        $logger->error("failed to remove $tempdir: $OS_ERROR");
    }
}

sub read_existing {
    my $compress_type = shift;
    my $mailfile      = shift;
    my $buffer        = shift;
    my $fh            = shift;
    my $sz            = shift;

    if ( $compress_type eq $BZIP2 ) {
        bunzip2 $mailfile => $buffer
            or croak "Unable to read bzip2 compressed file $mailfile: $Bzip2Error";
        return;
    }

    if ( $compress_type eq $GZIP ) {
        gunzip $mailfile => $buffer
            or croak "Unable to read gzip compressed file $mailfile: $GunzipError";
        return;
    }

    if ( $compress_type eq $UNCOMPRESSED ) {
        sysread $fh, $$buffer, $sz
            or croak "Can't read plain file $mailfile: $OS_ERROR";
        return;
    }

    $logger->error("Unknown compression type $compress_type");
}

sub write_newfile {
    my $compress_type = shift;
    my $mailfile      = shift;
    my $buffer        = shift;

    if ( $compress_type eq $BZIP2 ) {
        bzip2 $buffer => $mailfile
            or croak "Unable to write bzip2 compressed file $mailfile: $Bzip2Error";
    }

    if ( $compress_type eq $GZIP ) {
        gzip $buffer => $mailfile
            or croak "Unable to write gzip compressed file $mailfile: $GunzipError";
    }

    if ( $compress_type eq $UNCOMPRESSED ) {
        my $fh;
        if ( !open $fh, '>', $mailfile ) {
            $logger->error("Can't open $mailfile: $OS_ERROR");
            return 1;
        }
        binmode $fh;
        if ( !syswrite $fh, $$buffer ) {
            $logger->error("Can't write to $mailfile: $OS_ERROR");
            return 1;
        }
        close $fh;
    }
}

# Make sure this maildir looks like a real (dovecot) maildir.

sub maildir_check {
    my $maildir = shift;

    if ( !-d $maildir ) {
        $logger->info("$maildir is not a directory");
        return;
    }

    # Check for cur, new and tmp subdirectories

    if ( !-d catfile( $maildir, 'cur' ) ) {
        $logger->warn("$maildir has no 'cur' subdirectory, skipping");
        return;
    }
    if ( !-d catfile( $maildir, 'new' ) ) {
        $logger->warn("$maildir has no 'new' subdirectory, skipping");
        return;
    }
    if ( !-d catfile( $maildir, 'tmp' ) ) {
        $logger->warn("$maildir has no 'tmp' subdirectory, skipping");
        return;
    }

    # Check for dovecot uid list

    if ( !-f catfile( $maildir, 'dovecot-uidlist' ) ) {

        # Suspicious, but not fatal.
        $logger->info("$maildir does not contain a dovecot-uidlist file");
    }

    $logger->debug("$maildir looks like a Maildir");
    return 1;
}

# Lock this maildir and return the PID of the process holding the lock
# for us.  Return undef if we can't get the lock.

sub maildir_lock {
    my $maildir = shift;

    my $cmd_input  = q{};
    my $cmd_output = q{};
    my $cmd_error  = Symbol::gensym;

    my $cmd = "/usr/libexec/dovecot/maildirlock '$maildir' 3";

    my $pid = open3( $cmd_input, $cmd_output, $cmd_error, $cmd );

    if ( waitpid( $pid, 0 ) != $pid ) {
        $logger->error("waiting for $pid, but it's already gone");
        return;
    }

    my $child_exit_status = $CHILD_ERROR >> 8;

    if ($child_exit_status) {

        # At this point, we might want to check if the lock is stale,
        # this is an optimization.

        my $err = q{};
        while (<$cmd_error>) {
            $err = $err . $_;
        }

        $logger->warn("Can't get lock, $child_exit_status return from command: $cmd: $err");
        return;
    }

    my $output;
    while (<$cmd_output>) {
        $output = $output . $_;
    }
    chomp $output;

    my ($pid_out) = $output =~ / \A (\d+) \z /msx;
    if ( !$pid_out ) {
        $logger->warn("Can't get PID from maildirlock output '$output'");
        return;
    }

    return $pid_out;
}
